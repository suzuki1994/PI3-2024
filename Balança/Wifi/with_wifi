import network
import usocket as socket
from machine import Pin, SoftI2C
from hx711 import HX711
from lcd_api import LcdApi
from i2c_lcd import I2cLcd
from time import sleep

# WiFi credentials
WIFI_SSID = "YourWiFiSSID"
WIFI_PASS = "YourWiFiPassword"

# I2C address of the LCD
I2C_ADDR = 0x27
# Total number of rows and columns of the LCD
totalRows = 2
totalColumns = 16

# Define the data pin (DT) and serial clock pin (SCK) for the HX711
DATA_PIN = 2  # Pin connected to DT
SCK_PIN = 4   # Pin connected to SCK

# Connect to WiFi
def connect_to_wifi(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print("Connecting to WiFi...")
        wlan.connect(ssid, password)
        while not wlan.isconnected():
            pass
    print("WiFi connected:", wlan.ifconfig())

# Initialize I2C method for ESP32
i2c = SoftI2C(scl=Pin(22), sda=Pin(21), freq=10000)
# Initialize LCD object
lcd = I2cLcd(i2c, I2C_ADDR, totalRows, totalColumns)

# Create an instance of the HX711 object
hx = HX711(DATA_PIN, SCK_PIN)
hx.set_scale(10)  # Set the scale
xvar = 0  # Initialize variable to store the known tare weight

# Define function to handle HTTP GET request for weight and update LCD
def handle_http_get(client_sock):
    global xvar
    hx.tare()  # Request known tare weight
    value = hx.make_average()  # Read the weight

    if xvar == 0:  # If tare weight is not yet stored
        xvar = value  # Store the tare weight

    output = float(value) - float(xvar)  # Calculate net weight
    print('kg: ', value, '->', output)  # Print weight in kilograms

    # Update LCD with weight information
    linha_superior = "SUZUKI  ERIC"
    linha_inferior = "Peso: %.2f g" % output
    lcd.clear()
    lcd.putstr(linha_superior)
    lcd.move_to(0, 1)
    lcd.putstr(linha_inferior)

    # Prepare HTTP response
    response = """HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
<head><title>Weight</title></head>
<body>
<h1>Weight: %.2f g</h1>
</body>
</html>
""" % output

    client_sock.write(response)
    client_sock.close()

# Connect to WiFi
connect_to_wifi(WIFI_SSID, WIFI_PASS)

# Create a socket and start listening for incoming connections
server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_sock.bind(('192.168.1.27', 80))  # Change IP and port if necessary
server_sock.listen(1)

# Continuous loop for accepting connections and handling requests
while True:
    client_sock, addr = server_sock.accept()
    print('Got a connection from %s' % str(addr))
    data = client_sock.recv(1024)
    if data:
        print("Received:", data)
        handle_http_get(client_sock)

